apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'digital.wup.android-maven-publish'
apply plugin: 'org.jetbrains.dokka-android'

final def getVersionName = { ->
    return project.hasProperty('versionName') ? versionName : "0.0.0"
}

android {
    compileSdkVersion 29
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 29
        versionCode getVersionCode()
        versionName getVersionName()

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    def appcompat_version = "1.1.0"

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // ANDROID SUPPORT LIBRARY
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"

    implementation 'androidx.biometric:biometric:1.0.0-beta02'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.10'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.10'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.10'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.7'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.1'

    // TEST
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

// PUBLISHING

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
    group = 'build'
}

task generateJavaDoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/docs/javadoc"
    description = "Generates the Javadoc for this module."
    group = 'documentation'
}

task generateJavadocJar(type: Jar) {
    from generateJavaDoc
    archiveClassifier.set('javadoc')
    destinationDirectory.set(file("$buildDir/outputs/javadoc"))
    description = "Builds up a jar of this module´´ Javadoc."
    group = 'build'
}

group = 'io.hanko'
version = getVersionName().toString()

publishing {
    publications {
        Production(MavenPublication) {
            from components.android
            artifact generateSourcesJar
            artifact generateJavadocJar

            groupId 'io.hanko'
            artifactId 'fidouafclient'
            version getVersionName().toString()
        }
    }
}

def projectDisplayName = "HANKO FIDO UAF Client Android"

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayKey') ? project.property('bintrayKey') : System.getenv('BINTRAY_KEY')
    publications = ['Production']

    dryRun = false

    pkg {
        repo = 'android'
        name = 'fidouafclient'
        userOrg = 'hanko'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/teamhanko/fidouafclient.git'
        publish = true
        version {
            name = getVersionName().toString()
            desc = "${projectDisplayName}: ${getVersionName().toString()}"
            released = new Date()
            vcsTag = getVersionName().toString()
        }
    }
}
repositories {
    mavenCentral()
}
